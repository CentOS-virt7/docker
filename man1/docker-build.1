.TH "DOCKER" "1" "APRIL 2014" "Docker User Manuals" ""
.SH NAME
.PP
docker\-build \- Build a container image from a Dockerfile source at
PATH
.SH SYNOPSIS
.PP
\f[B]docker build\f[] [\f[B]\-\-no\-cache\f[][=\f[I]false\f[]]
[\f[B]\-q\f[]|\f[B]\-\-quiet\f[][=\f[I]false\f[]][\f[B]\-rm\f[]]
[\f[B]\-t\f[]|\f[B]\-\-tag\f[]=\f[I]tag\f[]] PATH | URL | \-
.SH DESCRIPTION
.PP
This will read the Dockerfile from the directory specified in
\f[B]PATH\f[].
It also sends any other files and directories found in the current
directory to the Docker daemon.
The contents of this directory would be used by \f[B]ADD\f[] commands
found within the Dockerfile.
.PP
Warning, this will send a lot of data to the Docker daemon depending on
the contents of the current directory.
The build is run by the Docker daemon, not by the CLI, so the whole
context must be transferred to the daemon.
The Docker CLI reports "Uploading context" when the context is sent to
the daemon.
.PP
When a single Dockerfile is given as the URL, then no context is set.
When a Git repository is set as the \f[B]URL\f[], the repository is used
as context.
.SH OPTIONS
.PP
\f[B]\-q\f[], \f[B]\-\-quiet\f[]=\f[I]true\f[]|\f[I]false\f[] When set
to true, suppress verbose build output.
Default is \f[I]false\f[].
.PP
\f[B]\-\-rm\f[]=\f[I]true\f[]|\f[I]false\f[] When true, remove
intermediate containers that are created during the build process.
The default is true.
.PP
\f[B]\-t\f[], \f[B]\-\-tag\f[]=\f[I]tag\f[] Tag to be applied to the
resulting image on successful completion of the build.
.PP
\f[B]\-\-no\-cache\f[]=\f[I]true\f[]|\f[I]false\f[] When set to true, do
not use a cache when building the image.
The default is \f[I]false\f[].
.SH EXAMPLES
.SS Building an image using a Dockefile located inside the current
directory
.PP
Docker images can be built using the build command and a Dockerfile:
.IP
.nf
\f[C]
docker\ build\ .
\f[]
.fi
.PP
During the build process Docker creates intermediate images.
In order to keep them, you must explicitly set \f[C]\-\-rm=false\f[].
.IP
.nf
\f[C]
docker\ build\ \-\-rm=false\ .
\f[]
.fi
.PP
A good practice is to make a sub\-directory with a related name and
create the Dockerfile in that directory.
For example, a directory called mongo may contain a Dockerfile to create
a Docker MongoDB image.
Likewise, another directory called httpd may be used to store
Dockerfiles for Apache web server images.
.PP
It is also a good practice to add the files required for the image to
the sub\-directory.
These files will then be specified with the \f[C]ADD\f[] instruction in
the Dockerfile.
Note: If you include a tar file (a good practice!), then Docker will
automatically extract the contents of the tar file specified within the
\f[C]ADD\f[] instruction into the specified target.
.SS Building an image using a URL
.PP
This will clone the specified Github repository from the URL and use it
as context.
The Dockerfile at the root of the repository is used as Dockerfile.
This only works if the Github repository is a dedicated repository.
.IP
.nf
\f[C]
docker\ build\ github.com/scollier/Fedora\-Dockerfiles/tree/master/apache
\f[]
.fi
.PP
Note: You can set an arbitrary Git repository via the \f[C]git://\f[]
schema.
.SH HISTORY
.PP
March 2014, Originally compiled by William Henry (whenry at redhat dot
com) based on docker.io source material and internal work.
.SH AUTHORS
William Henry.
